package tls

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func encodedClientHelloMsg() []byte {
	return []byte{
		// Record Header
		0x16,
		0x03, 0x04,
		0x00, 0x9c,

		// Handshake Header
		0x01,
		0x00, 0x00, 0x98,

		// Client Version
		0x03, 0x04,

		// Client Random
		0x73, 0x6f, 0x6D, 0x65, 0x5F, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5F, 0x33, 0x32, 0x5F, 0x62, 0x79, 0x74, 0x65,
		0x73, 0x5f, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x30,

		// Session ID
		0x00,

		// Cipher Suites
		0x00, 0x02,
		0x13, 0x01,

		// Compression Methods
		0x01,
		0x00,

		// Extensions Length
		0x00, 0x6d,

		// Extension - Server Name
		0x0, 0x0,
		0x0, 0xe,
		0x0, 0xc,
		0x0,
		0x0, 0x9,
		0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x73, 0x74,

		// Extension - EC Point Formats
		0x0, 0x0b,
		0x0, 0x04,
		0x03,
		0x0,
		0x01,
		0x02,

		// Extension - Supported Groups
		0x00, 0x0a,
		0x00, 0x04,
		0x00, 0x02,
		0x00, 0x1d,

		// Extension - Session Ticket
		0x0, 0x23,
		0x0, 0x0,

		// Extension - Encrypt-Then-MAC
		0x0, 0x16,
		0x0, 0x0,

		// Extension - Extended Master Secret
		0x0, 0x17,
		0x0, 0x0,

		// Extension - Signature Algorithms
		0x0, 0x0d,
		0x0, 0x04,
		0x0, 0x02,
		0x08, 0x06,

		// Extension - Supported Versions
		0x0, 0x2b,
		0x0, 0x03,
		0x02,
		0x03, 0x04,

		// Extension - PSK Key Exchange Modes
		0x0, 0x2d,
		0x0, 0x02,
		0x01,
		0x01,

		// Extension - Key Share
		0x0, 0x33,
		0x0, 0x26,
		0x0, 0x24,
		0x0, 0x1d,
		0x0, 0x20,
		0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
	}
}

func encodedServerHelloMsg() []byte {
	return []byte{
		// Record Header
		0x16,
		0x03, 0x04,
		0x00, 0x5b,

		// Handshake Header
		0x02, 0x00, 0x00, 0x57,

		// Server Version
		0x03, 0x04,

		// Server Random
		0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65,
		0x73, 0x5f, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x30,

		// Session ID
		0x00,

		// Cipher Suite
		0x13, 0x01,

		// Compression Method
		0x00,

		// Extensions Length
		0x00, 0x2f,

		// Extension - Supported Versions
		0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,

		// Extension - Key Share
		0x00, 0x33,
		0x00, 0x24,
		0x00, 0x1d,
		0x00, 0x20,
		0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea,
		0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21,
		0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
	}
}

func TestEncodeClientHello(t *testing.T) {
	t.Parallel()

	keys := []publicKey{{
		payload: [32]byte{
			0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
			0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
		},
		exchangeGroup: x25519(),
	}}
	encoded, err := encodeClientHello(
		[]string{"test.host"},
		keys,
		[32]byte([]byte("some_secret_32_bytes_12345678910")),
	)
	require.NoError(t, err)
	assert.Equal(t, encodedClientHelloMsg(), encoded)
}

func TestDecodeClientHello(t *testing.T) {
	t.Parallel()

	helloMsg, err := decodeRawHello(encodedClientHelloMsg())
	require.NoError(t, err)

	assert.Len(t, helloMsg.cipherSuites, 1)
	assert.Equal(t, tlsAes128GcmSha256(), helloMsg.cipherSuites[0])

	assert.Len(t, helloMsg.entriesList, 1)
	assert.Equal(t, "test.host", string(helloMsg.extensionServerName.entriesList[0].host))

	assert.Len(t, helloMsg.groups, 1)
	assert.Equal(t, x25519(), helloMsg.groups[0])

	assert.Len(t, helloMsg.algorithms, 1)
	assert.Equal(t, rsaPssRsaeSha512(), helloMsg.algorithms[0])

	assert.Len(t, helloMsg.versions, 1)
	assert.Equal(t, tls13(), helloMsg.versions[0])

	assert.Len(t, helloMsg.modes, 1)
	assert.Equal(t, pskWithECDHEKeyEstablishment(), helloMsg.modes[0])

	assert.Equal(t, x25519(), helloMsg.extensionKeyShare.publicKeys[0].exchangeGroup)
	assert.Equal(t, [32]byte{
		0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
	}, helloMsg.extensionKeyShare.publicKeys[0].payload)
}

func TestEncodeServerHello(t *testing.T) {
	t.Parallel()

	key := publicKey{
		payload: [32]byte{
			0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
			0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
		},
		exchangeGroup: x25519(),
	}
	encoded, err := encodeServerHello(
		key,
		[32]byte([]byte("some_secret_32_bytes_12345678910")),
		tlsAes128GcmSha256(),
	)
	require.NoError(t, err)
	assert.Equal(t, encodedServerHelloMsg(), encoded)
}

func TestDecodeServerHello(t *testing.T) {
	t.Parallel()

	helloMsg, err := decodeRawHello(encodedServerHelloMsg())
	require.NoError(t, err)

	assert.Len(t, helloMsg.cipherSuites, 1)
	assert.Equal(t, tlsAes128GcmSha256(), helloMsg.cipherSuites[0])

	assert.Len(t, helloMsg.versions, 1)
	assert.Equal(t, tls13(), helloMsg.versions[0])

	assert.Equal(t, x25519(), helloMsg.extensionKeyShare.publicKeys[0].exchangeGroup)
	assert.Equal(t, [32]byte{
		0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
	}, helloMsg.extensionKeyShare.publicKeys[0].payload)
}

func TestServerNameExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeServerNameExtension([]string{"test.host"})
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x0, 0x0,
		0x0, 0xe,
		0x0, 0xc,
		0x0,
		0x0, 0x9,
		0x74, 0x65, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	}, encoded)
}

func TestEncodeECPointFormatsExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeECPointFormatsExtension()
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x0, 0x0b,
		0x0, 0x04,
		0x03,
		0x0,
		0x01,
		0x02,
	}, encoded)
}

func TestSupportedGroupExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeSupportedGroupsExtension([]supportedKeyExchangeGroup{x25519()})
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x00, 0x0a,
		0x00, 0x04,
		0x00, 0x02,
		0x00, 0x1d,
	}, encoded)
}

func TestSessionTicketExtension(t *testing.T) {
	t.Parallel()

	encoded := encodeSessionTicketExtension()
	assert.Equal(t, []byte{
		0x0, 0x23,
		0x0, 0x0,
	}, encoded)
}

func TestEncryptThenMACExtension(t *testing.T) {
	t.Parallel()

	encoded := encodeEncryptThenMACExtension()
	assert.Equal(t, []byte{
		0x0, 0x16,
		0x0, 0x0,
	}, encoded)
}

func TestExtendedMasterSecretExtension(t *testing.T) {
	t.Parallel()

	encoded := encodeExtendedMasterSecretExtension()
	assert.Equal(t, []byte{
		0x0, 0x17,
		0x0, 0x0,
	}, encoded)
}

func TestSignatureAlgorithmsExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeSignatureAlgorithmsExtension([]signatureAlgorithm{rsaPssRsaeSha512()})
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x0, 0x0d,
		0x0, 0x04,
		0x0, 0x02,
		0x08, 0x06,
	}, encoded)
}

func TestSupportedVersionsExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeSupportedVersionsExtension([]supportedTLSVersion{tls13()})
	require.NoError(t, err)
	assert.Equal(t, []byte{
		0x0, 0x2b,
		0x0, 0x03,
		0x02,
		0x03, 0x04,
	}, encoded)
}

func TestPSKKeyExchangeModesExtension(t *testing.T) {
	t.Parallel()

	encoded := encodePSKKeyExchangeModesExtension()
	assert.Equal(t, []byte{
		0x0, 0x2d,
		0x0, 0x02,
		0x01,
		0x01,
	}, encoded)
}

func TestKeyShareExtension(t *testing.T) {
	t.Parallel()

	encoded, err := encodeClientKeyShareExtension([]publicKey{{
		payload: [32]byte{
			0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
			0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
		},
		exchangeGroup: x25519(),
	}})
	require.NoError(t, err)

	assert.Equal(t, []byte{
		0x0, 0x33,
		0x0, 0x26,
		0x0, 0x24,
		0x0, 0x1d,
		0x0, 0x20,
		0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54,
	}, encoded)
}
