// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/r-erema/go_sendbox/learning/k8s/example3/pkg/apis/solarsystem/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StarLister helps list Stars.
// All objects returned here must be treated as read-only.
type StarLister interface {
	// List lists all Stars in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Star, err error)
	// Stars returns an object that can list and get Stars.
	Stars(namespace string) StarNamespaceLister
	StarListerExpansion
}

// starLister implements the StarLister interface.
type starLister struct {
	indexer cache.Indexer
}

// NewStarLister returns a new StarLister.
func NewStarLister(indexer cache.Indexer) StarLister {
	return &starLister{indexer: indexer}
}

// List lists all Stars in the indexer.
func (s *starLister) List(selector labels.Selector) (ret []*v1.Star, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Star))
	})
	return ret, err
}

// Stars returns an object that can list and get Stars.
func (s *starLister) Stars(namespace string) StarNamespaceLister {
	return starNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StarNamespaceLister helps list and get Stars.
// All objects returned here must be treated as read-only.
type StarNamespaceLister interface {
	// List lists all Stars in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Star, err error)
	// Get retrieves the Star from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Star, error)
	StarNamespaceListerExpansion
}

// starNamespaceLister implements the StarNamespaceLister
// interface.
type starNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Stars in the indexer for a given namespace.
func (s starNamespaceLister) List(selector labels.Selector) (ret []*v1.Star, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Star))
	})
	return ret, err
}

// Get retrieves the Star from the indexer for a given namespace and name.
func (s starNamespaceLister) Get(name string) (*v1.Star, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("star"), name)
	}
	return obj.(*v1.Star), nil
}
